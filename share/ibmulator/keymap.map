# IBMulator Keymap file
#
# The keymap file maps input events to emulator events.
#
# For keyboard events IBMulator uses the SDL library's identifiers.
# Refer to https://wiki.libsdl.org/SDL_Keycode for the list of SDL symbols.
#
#
# The general syntax for this file is:
#  INPUT_EVENT = IBMULATOR_EVENT [+IBMULATOR_EVENT...] [; OPTION...]
#
#
# INPUT_EVENT can be:
#  SDLK_*               : SDL keyboard keycode symbol
#  SDL_SCANCODE_*       : SDL keyboard scancode symbol
#  KMOD_*[+KMOD_*...]   : SDL keyboard modifier(s) followed by 1 of SDLK_* or SDL_SCANCODE_*
#  JOY_j_BUTTON_n       : joystick / gamepad j's button number n (j and n start from 0)
#  JOY_j_AXIS_n         : joystick / gamepad j's axis number n (j and n start from 0)
#  MOUSE_AXIS_a         : mouse axis a (a=X or Y)
#  MOUSE_BUTTON_n       : mouse button number n (1=left, 2=right, 3=center, other buttons have n>3)
#
#
# IBMULATOR_EVENT can be:
#  KEY_*               : an emulator (guest OS) keyboard key
#  JOY_j_BUTTON_n      : joystick j's button number n (j=A or B, n=1 or 2)
#  JOY_j_AXIS_n(v,t,a) : joystick j's axis n (j=A or B, n=X or Y), for params see below
#  MOUSE_BUTTON_n      : mouse button n (1=left, 2=center, 3=right)
#  MOUSE_AXIS_n(p,t,a) : mouse axis n (n=X or Y), for params see below
#  FUNC_*              : GUI, program, or emulator function, see below
#  WAIT(x)             : wait x milliseconds before firing the next event
#  RELEASE(i)          : release key/button at index i (1-based)
#                        if i=0 or not specified then all keys will be released
#  SKIP_TO(i)          : skip event execution to event at index i (1-based)
#  REPEAT              : equivalent to SKIP_TO(1)
#  AUTOFIRE(x)         : will be expanded to WAIT(x/2) + RELEASE + WAIT(x/2) + REPEAT
#                        default for x is 50, ie. ~20 clicks per second
#
#
# OPTION can be:
#  MODE:m              : macro execution mode; possible values for `m` are:
#                         default: default mode of execution, macro starts when the binding is activated and ends when deactivated
#                         1shot: macro starts and ends immediately; timed macros will run until their completion (endless macros will run forever)
#                         latched: macro starts when the binding is activated and ends when it's activated again
#  GROUP:g             : timed macros belonging to the same group `g` can't run concurrently
#  TYPEMATIC:NO        : disables the typematic keyboard feature
#
# To specify multiple binding options separate them with spaces.
#
#
# SDL keycodes depend on the current keyboard layout loaded in your operating system.
# SDL scancodes represent physical keyboard keys and are not affected by any OS remapping.
#
# SKIP_TO and REPEAT have an implicit minimum wait time dependent on the screen refresh rate.
# To avoid event spamming, they should be used in conjunction with WAIT.
#
# Valid KMOD_* keyboard modifiers are:
#  KMOD_SHIFT  : any shift
#  KMOD_LSHIFT : left shift
#  KMOD_RSHIFT : right shift
#  KMOD_CTRL   : any control
#  KMOD_LCTRL  : left control
#  KMOD_RCTRL  : right control
#  KMOD_ALT    : any alt
#  KMOD_LALT   : left alt
#  KMOD_RALT   : right alt
#  KMOD_GUI    : any meta (the "Win" key)
#  KMOD_LGUI   : left meta
#  KMOD_RGUI   : right meta
#
# Key modifiers bindings have some limitations:
#  - you must specify combos with the modifier(s) first, for example:
#     KMOD_CTRL + SDLK_TAB = KEY_ALT_L + KEY_TAB
#  - SDL key bindings for modifiers (e.g. `SDLK_LCTRL`) won't work as expected when their mode of operation is not `default` and they are also used in combos (e.g. `KMOD_CTRL + SDLK_TAB`)
#  - on keyboards with the AltGr key the KMOD_RALT modifier might not work, as AltGr could be translated with LCTRL+RALT by the host OS
#
# Valid FUNC_* functions are:
#  FUNC_GUI_MODE_ACTION(x)   : GUI Mode action x (see README "Default key bindings")
#  FUNC_SHOW_OPTIONS         : open the options window
#  FUNC_TOGGLE_POWER         : toggle the machine's power button
#  FUNC_TOGGLE_PAUSE         : pause / resume emulation
#  FUNC_TOGGLE_STATUS_IND    : show / hide the status indicators
#  FUNC_TOGGLE_DBG_WND       : show / hide the debug windows
#  FUNC_TAKE_SCREENSHOT      : take a screenshot
#  FUNC_TOGGLE_AUDIO_CAPTURE : start / stop audio capture
#  FUNC_TOGGLE_VIDEO_CAPTURE : start / stop video capture
#  FUNC_INSERT_FLOPPY        : open the floppy disk select dialog
#  FUNC_EJECT_FLOPPY         : eject floppy disk from active drive
#  FUNC_CHANGE_FLOPPY_DRIVE  : change active floppy drive (Aâ†”B)
#  FUNC_SAVE_STATE           : open the save state dialog
#  FUNC_LOAD_STATE           : open the load state dialog
#  FUNC_QUICK_SAVE_STATE     : quick save the current emulator's state
#  FUNC_QUICK_LOAD_STATE     : quick load the last saved state
#  FUNC_GRAB_MOUSE           : lock / unlock mouse to emulator
#  FUNC_SYS_SPEED_UP         : increase emulation speed (whole system)
#  FUNC_SYS_SPEED_DOWN       : decrease emulation speed (whole system)
#  FUNC_SYS_SPEED(x)         : set the emulation speed to x% (whole system)
#  FUNC_TOGGLE_FULLSCREEN    : toggle fullscreen mode
#  FUNC_SWITCH_KEYMAPS       : change the active keymap to the next available one
#  FUNC_EXIT                 : close IBMulator
#
#
# MOUSE_AXIS_n events can have 3 arguments when mapped to joystick axes or buttons, all optional:
#  argument 1 (p): amount of pixels / maximum speed of the mouse pointer (per 10ms, default 10)
#  argument 2 (t): type of movement, 0=continuous/proportional, 1=accelerated (default 0)
#  argument 3 (a): amount of acceleration (default 5, applied only when t=1)
# For buttons to mouse axis you must specify the direction with the sign of `p`; for joystick/gamepad axes to mouse axes the direction is auto determined and a negative `p` value will invert the direction.
# These parameters won't apply when a mouse axis is mapped to a mouse axis; in that case a direct (relative movement) translation will be applied (only exception is the first parameter `p` that can be set to `-1` to invert the axis).
# Examples:
#  SDLK_UP = MOUSE_AXIS_Y(10,1)       # accelerated movement with a max. speed of 10pix per 10ms
#  SDLK_LEFT = MOUSE_AXIS_X(-5,0)     # -5pix per 10ms constant speed
#  JOY_0_AXIS_0 = MOUSE_AXIS_X(10,0)  # proportional speed (smoothstep), 0 to +10/-10 pix per 10ms
#  JOY_0_AXIS_1 = MOUSE_AXIS_Y(-10,0) # same but inverted axis
#  JOY_0_AXIS_2 = MOUSE_AXIS_X(5,1)   # accelerated movement 0 to 5pix, useful for d-pads
#
#
# JOY_j_AXIS_n events can have 3 arguments when they are mapped to buttons:
#  argument 1 (v): stop value, from -32768 to 32767 (sign sets the direction)
#                  you can also use -max and max strings (no default)
#  argument 2 (t): type of stick movement, 0=immediate, 1=constant speed (default 0)
#  argument 3 (a): speed of stick movement (default 500, applied only when t=1)
# Parameters `t` and `a` are applied only for keys and buttons; movement is automatically determined when you map mouse and joystick axes (a negative `v` value will invert the direction).
# Examples:
#  SDLK_KP_2 = JOY_A_AXIS_Y(max,1)  # stick movement at constant speed from 0 to 32767
#  SDLK_KP_4 = JOY_A_AXIS_X(-max,0) # immediate stick movement to -32768
#  SDLK_KP_6 = JOY_A_AXIS_X(max,1)
#  SDLK_KP_8 = JOY_A_AXIS_Y(-max,1)
#
#
# KEY_* events have an implicit chain of commands at the end to emulate typematic repeats, but only when the key event is not part of a macro (except when combined with key modifiers).
# For example "SDLK_a = KEY_A" is automatically translated to:
#  SDLK_a = KEY_A + wait(tmd) + KEY_A + wait(tmr) + skip_to(3)
# where:
#  tmd = typematic delay
#  tmr = typematic repeat rate
# Both tmd and tmr values are set by the guest OS at run-time (see the MODE DOS command). 
#
#
# Some macro examples:
#  - Joystick autofire with a 500ms delay and ~20 clicks per second:
#     JOY_0_BUTTON_0 = JOY_A_BUTTON_1 + wait(500) + release + wait(25) + JOY_A_BUTTON_1 + wait(25) + skip_to(3)
#  - Normal 'D' key press, but if kept pressed for >250ms runs the DOS 'dir' command instead of typematic repeats:
#     SDLK_d = KEY_D + wait(250) + KEY_I + KEY_R + KEY_ENTER
#
#
# Keywords and identifiers are case insensitive, so for example `SDLK_a` is the same as `sdlk_a` and `SDLK_A`.
#

### Mouse bindings

MOUSE_AXIS_X   = MOUSE_AXIS_X
MOUSE_AXIS_Y   = MOUSE_AXIS_Y
MOUSE_BUTTON_1 = MOUSE_BUTTON_1
MOUSE_BUTTON_2 = MOUSE_BUTTON_2
MOUSE_BUTTON_3 = FUNC_GRAB_MOUSE


### Joystick / Gamepad bindings

JOY_0_AXIS_0   = JOY_A_AXIS_X
JOY_0_AXIS_1   = JOY_A_AXIS_Y
JOY_0_BUTTON_0 = JOY_A_BUTTON_1
JOY_0_BUTTON_1 = JOY_A_BUTTON_2
JOY_1_AXIS_0   = JOY_B_AXIS_X
JOY_1_AXIS_1   = JOY_B_AXIS_Y
JOY_1_BUTTON_0 = JOY_B_BUTTON_1
JOY_1_BUTTON_1 = JOY_B_BUTTON_2


### Functions 

KMOD_CTRL + SDLK_F1     = FUNC_GUI_MODE_ACTION(1)
KMOD_SHIFT + SDLK_F1    = FUNC_GUI_MODE_ACTION(2)
KMOD_CTRL + SDLK_F2     = FUNC_SHOW_OPTIONS
KMOD_CTRL + SDLK_F3     = FUNC_TOGGLE_POWER
KMOD_SHIFT + SDLK_F4    = FUNC_TOGGLE_STATUS_IND
KMOD_CTRL + SDLK_F4     = FUNC_TOGGLE_DBG_WND
KMOD_CTRL + SDLK_F5     = FUNC_TAKE_SCREENSHOT
KMOD_CTRL + SDLK_F6     = FUNC_TOGGLE_AUDIO_CAPTURE
KMOD_SHIFT + SDLK_F6    = FUNC_TOGGLE_VIDEO_CAPTURE
KMOD_SHIFT + SDLK_F7    = FUNC_INSERT_FLOPPY
KMOD_CTRL + SDLK_F7     = FUNC_EJECT_FLOPPY
KMOD_CTRL + KMOD_SHIFT + SDLK_F7 = FUNC_CHANGE_FLOPPY_DRIVE
KMOD_SHIFT + SDLK_F8    = FUNC_SAVE_STATE
KMOD_SHIFT + SDLK_F9    = FUNC_LOAD_STATE
KMOD_CTRL + SDLK_F8     = FUNC_QUICK_SAVE_STATE
KMOD_CTRL + SDLK_F9     = FUNC_QUICK_LOAD_STATE
KMOD_CTRL + SDLK_F10    = FUNC_GRAB_MOUSE
KMOD_CTRL + SDLK_F11    = FUNC_SYS_SPEED_DOWN
KMOD_SHIFT + SDLK_F11   = FUNC_SYS_SPEED(10); mode:latched group:sysspeed
KMOD_CTRL + SDLK_F12    = FUNC_SYS_SPEED_UP
KMOD_SHIFT + SDLK_F12   = FUNC_SYS_SPEED(500); mode:latched group:sysspeed
KMOD_SHIFT + SDLK_SPACE = FUNC_SWITCH_KEYMAPS
KMOD_SHIFT + SDLK_PAUSE = FUNC_TOGGLE_PAUSE
KMOD_ALT + SDLK_RETURN  = FUNC_TOGGLE_FULLSCREEN
KMOD_ALT + SDLK_F4      = FUNC_EXIT


### Keyboard bindings

KMOD_CTRL + SDLK_INSERT  = KEY_SYSREQ
KMOD_CTRL + SDLK_END     = KEY_BREAK
KMOD_CTRL + SDLK_DELETE  = KEY_CTRL_L + KEY_ALT_L + KEY_DELETE
KMOD_CTRL + SDLK_TAB     = KEY_ALT_L + KEY_TAB

SDLK_LCTRL                  = KEY_CTRL_L
SDLK_LSHIFT                 = KEY_SHIFT_L
SDLK_F1                     = KEY_F1
SDLK_F2                     = KEY_F2
SDLK_F3                     = KEY_F3
SDLK_F4                     = KEY_F4
SDLK_F5                     = KEY_F5
SDLK_F6                     = KEY_F6
SDLK_F7                     = KEY_F7
SDLK_F8                     = KEY_F8
SDLK_F9                     = KEY_F9
SDLK_F10                    = KEY_F10
SDLK_F11                    = KEY_F11
SDLK_F12                    = KEY_F12
SDLK_RCTRL                  = KEY_CTRL_R
SDLK_RSHIFT                 = KEY_SHIFT_R
SDLK_CAPSLOCK               = KEY_CAPS_LOCK
SDLK_NUMLOCKCLEAR           = KEY_NUM_LOCK
SDLK_LALT                   = KEY_ALT_L
SDLK_RALT                   = KEY_ALT_R
SDLK_a                      = KEY_A
SDLK_b                      = KEY_B
SDLK_c                      = KEY_C
SDLK_d                      = KEY_D
SDLK_e                      = KEY_E
SDLK_f                      = KEY_F
SDLK_g                      = KEY_G
SDLK_h                      = KEY_H
SDLK_i                      = KEY_I
SDLK_j                      = KEY_J
SDLK_k                      = KEY_K
SDLK_l                      = KEY_L
SDLK_m                      = KEY_M
SDLK_n                      = KEY_N
SDLK_o                      = KEY_O
SDLK_p                      = KEY_P
SDLK_q                      = KEY_Q
SDLK_r                      = KEY_R
SDLK_s                      = KEY_S
SDLK_t                      = KEY_T
SDLK_u                      = KEY_U
SDLK_v                      = KEY_V
SDLK_w                      = KEY_W
SDLK_x                      = KEY_X
SDLK_y                      = KEY_Y
SDLK_z                      = KEY_Z
SDLK_0                      = KEY_0
SDLK_1                      = KEY_1
SDLK_2                      = KEY_2
SDLK_3                      = KEY_3
SDLK_4                      = KEY_4
SDLK_5                      = KEY_5
SDLK_6                      = KEY_6
SDLK_7                      = KEY_7
SDLK_8                      = KEY_8
SDLK_9                      = KEY_9
SDLK_ESCAPE                 = KEY_ESC
SDLK_SPACE                  = KEY_SPACE
SDL_SCANCODE_APOSTROPHE     = KEY_SINGLE_QUOTE
SDL_SCANCODE_COMMA          = KEY_COMMA
SDL_SCANCODE_PERIOD         = KEY_PERIOD
SDL_SCANCODE_SLASH          = KEY_SLASH
SDL_SCANCODE_SEMICOLON      = KEY_SEMICOLON
SDL_SCANCODE_EQUALS         = KEY_EQUALS
SDL_SCANCODE_LEFTBRACKET    = KEY_LEFT_BRACKET
SDL_SCANCODE_BACKSLASH      = KEY_BACKSLASH
SDL_SCANCODE_RIGHTBRACKET   = KEY_RIGHT_BRACKET
SDL_SCANCODE_MINUS          = KEY_MINUS
SDL_SCANCODE_GRAVE          = KEY_GRAVE
SDLK_BACKSPACE              = KEY_BACKSPACE
SDLK_RETURN                 = KEY_ENTER
SDLK_TAB                    = KEY_TAB
SDL_SCANCODE_NONUSBACKSLASH = KEY_LEFT_BACKSLASH
SDLK_PRINTSCREEN            = KEY_PRINT
SDLK_SCROLLLOCK             = KEY_SCRL_LOCK
SDLK_PAUSE                  = KEY_PAUSE
SDLK_INSERT                 = KEY_INSERT
SDLK_DELETE                 = KEY_DELETE
SDLK_HOME                   = KEY_HOME
SDLK_END                    = KEY_END
SDLK_PAGEUP                 = KEY_PAGE_UP
SDLK_PAGEDOWN               = KEY_PAGE_DOWN
SDLK_KP_PLUS                = KEY_KP_ADD
SDLK_KP_MINUS               = KEY_KP_SUBTRACT
SDLK_KP_1                   = KEY_KP_END
SDLK_KP_2                   = KEY_KP_DOWN
SDLK_KP_3                   = KEY_KP_PAGE_DOWN
SDLK_KP_4                   = KEY_KP_LEFT
SDLK_KP_6                   = KEY_KP_RIGHT
SDLK_KP_7                   = KEY_KP_HOME
SDLK_KP_8                   = KEY_KP_UP
SDLK_KP_9                   = KEY_KP_PAGE_UP
SDLK_KP_0                   = KEY_KP_INSERT
SDLK_KP_PERIOD              = KEY_KP_DELETE
SDLK_KP_5                   = KEY_KP_5
SDLK_UP                     = KEY_UP
SDLK_DOWN                   = KEY_DOWN
SDLK_LEFT                   = KEY_LEFT
SDLK_RIGHT                  = KEY_RIGHT
SDLK_KP_ENTER               = KEY_KP_ENTER
SDLK_KP_MULTIPLY            = KEY_KP_MULTIPLY
SDLK_KP_DIVIDE              = KEY_KP_DIVIDE



# keys not present in the standard pre-Win95 keyboards (TODO)
# KEY_MENU
# KEY_WIN_L
# KEY_WIN_R
# KEY_INT_BACK
# KEY_INT_FORWARD
# KEY_INT_STOP
# KEY_INT_MAIL
# KEY_INT_SEARCH
# KEY_INT_FAV
# KEY_INT_HOME
# KEY_POWER_MYCOMP
# KEY_POWER_CALC
# KEY_POWER_SLEEP
# KEY_POWER_POWER
# KEY_POWER_WAKE
